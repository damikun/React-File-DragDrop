[{"C:\\Users\\dakupc\\Documents\\.NetDev\\Drag-Drop-File\\File-DragDropper\\src\\index.tsx":"1","C:\\Users\\dakupc\\Documents\\.NetDev\\Drag-Drop-File\\File-DragDropper\\src\\App.tsx":"2","C:\\Users\\dakupc\\Documents\\.NetDev\\Drag-Drop-File\\File-DragDropper\\src\\Components\\FileDragDrop\\FileDragDrop.tsx":"3","C:\\Users\\dakupc\\Documents\\.NetDev\\Drag-Drop-File\\File-DragDropper\\src\\Components\\constants.tsx":"4","C:\\Users\\dakupc\\Documents\\.NetDev\\Drag-Drop-File\\File-DragDropper\\src\\Components\\Progress\\ProgressBar.tsx":"5","C:\\Users\\dakupc\\Documents\\.NetDev\\Drag-Drop-File\\File-DragDropper\\src\\Components\\Buttons\\StayledButton.tsx":"6","C:\\Users\\dakupc\\Documents\\.NetDev\\Drag-Drop-File\\File-DragDropper\\src\\Components\\Buttons\\CancleButton.tsx":"7"},{"size":222,"mtime":1606942061793,"results":"8","hashOfConfig":"9"},{"size":1140,"mtime":1606947412390,"results":"10","hashOfConfig":"9"},{"size":10904,"mtime":1606947382467,"results":"11","hashOfConfig":"9"},{"size":1692,"mtime":1606941509511,"results":"12","hashOfConfig":"9"},{"size":2049,"mtime":1606943849676,"results":"13","hashOfConfig":"9"},{"size":2381,"mtime":1606942321522,"results":"14","hashOfConfig":"9"},{"size":590,"mtime":1606944214496,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"102f6c5",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"C:\\Users\\dakupc\\Documents\\.NetDev\\Drag-Drop-File\\File-DragDropper\\src\\index.tsx",[],["34","35"],"C:\\Users\\dakupc\\Documents\\.NetDev\\Drag-Drop-File\\File-DragDropper\\src\\App.tsx",["36"],"import React, { useState } from 'react';\nimport './App.css';\nimport clsx from \"clsx\";\nimport FileDragDrop from \"./Components/FileDragDrop/FileDragDrop\"\n\nfunction App() {\n\n  //@ts-ignore\n  const [state, setstate] = useState(\"\")\n\n  return (\n    <div className=\"flex App h-screen w-screen bg-gray-50\">\n      <div className=\" mx-auto my-auto w-md\">\n        <div\n          className={clsx(\n            \"border-2 border-dotted hover items-center\",\n            \"hover:bg-gray-50  p-2 h-36\"\n          )}\n        >\n          <FileDragDrop\n            className=\"text-gray-600\"\n            accept=\"image/png\"\n            api_url=\"https://localhost:5001/api/Data/UploadFile\"\n            onSuccess={(token, response) => {\n              setstate(token);\n            }}\n            onError={(type, message, object) => {\n\n              window.alert(`Type: ${type}, Messagbe: ${type}, Object: ${object}`)\n\n              if (type === \"Exception\") {\n                console.log(object);\n              }\n\n              setstate(\"\");\n            }}\n            multiple={false}\n          />\n        </div>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\dakupc\\Documents\\.NetDev\\Drag-Drop-File\\File-DragDropper\\src\\Components\\FileDragDrop\\FileDragDrop.tsx",["37","38","39"],"import React, { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport { HTTP_STATUS } from \"../constants\";\r\nimport axios, { AxiosRequestConfig } from \"axios\";\r\nimport ProgressBar from \"../Progress/ProgressBar\";\r\nimport StayledButton from \"../Buttons/StayledButton\";\r\nimport clsx from \"clsx\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faCheckCircle,\r\n  faFileUpload,\r\n  faSpinner,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport CancleButton from \"../Buttons/CancleButton\";\r\n\r\nexport type ErrorType = \"Network\" | \"Exception\" | \"FileError\";\r\n\r\ntype functionFileDragDropProps = {\r\n  onSuccess: (token: string, response: any) => void;\r\n  onError: (\r\n    type: ErrorType,\r\n    error: string,\r\n    object: any | undefined | null\r\n  ) => void;\r\n  api_RequestConfig?: AxiosRequestConfig;\r\n  api_url: string;\r\n  accept?: string;\r\n  multiple?: boolean;\r\n  variant?: \"big\" | \"small\";\r\n  className?:string;\r\n};\r\n\r\nexport default function FileDragDrop({\r\n  onSuccess,\r\n  onError,\r\n  api_RequestConfig,\r\n  api_url,\r\n  accept,\r\n  multiple = false,\r\n  variant = \"big\",\r\n  className\r\n}: functionFileDragDropProps) {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const [isSuccess, setIsSuccess] = useState(false);\r\n  const [source, setSource] = useState(axios.CancelToken.source());\r\n\r\n  const divRef = useRef<HTMLDivElement>(null);\r\n\r\n  function CancleRequest() {\r\n    source?.cancel();\r\n    let token = axios.CancelToken.source();\r\n    setSource(token);\r\n    setProgress(0);\r\n    setIsSuccess(false);\r\n    return token;\r\n  }\r\n\r\n  function upload(file: File, onUploadProgress: (progressEvent: any) => void) {\r\n    let formData = new FormData();\r\n    formData.append(\"file\", file);\r\n\r\n    const new_token = CancleRequest();\r\n\r\n    return axios.post(api_url, formData, {\r\n      ...api_RequestConfig,\r\n      headers: api_RequestConfig\r\n        ? api_RequestConfig.headers\r\n        : {\r\n            \"Content-Type\": \"multipart/form-data\",\r\n          },\r\n      withCredentials: api_RequestConfig\r\n        ? api_RequestConfig.withCredentials\r\n        : true,\r\n\r\n      cancelToken: new_token.token,\r\n\r\n      onUploadProgress,\r\n    });\r\n  }\r\n\r\n  const onDragEnter = useCallback((e) => {\r\n    if (e?.currentTarget?.contains(e.relatedTarget)) return;\r\n\r\n    e.stopPropagation();\r\n    e.stopImmediatePropagation();\r\n    e.preventDefault();\r\n\r\n    if (progress === 0 && !isVisible) setIsVisible(true);\r\n  }, [progress,isVisible]);\r\n\r\n  const onDragOver = useCallback((e) => {\r\n    if (e?.currentTarget?.contains(e.relatedTarget)) return;\r\n\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    e.stopImmediatePropagation();\r\n  }, []);\r\n\r\n  const onDragLeave = useCallback((e) => {\r\n    if (e.currentTarget.contains(e.relatedTarget)) return;\r\n\r\n    e.stopPropagation();\r\n    e.stopImmediatePropagation();\r\n    e.preventDefault();\r\n\r\n    if (progress === 0) setIsVisible(false);\r\n  }, [progress]);\r\n\r\n  const onDrop = (e: any) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    if (isSuccess === false && progress <= 0) {\r\n      if (containsFiles(e) && e?.dataTransfer?.files)\r\n        handleUpload(e?.dataTransfer?.files);\r\n    }\r\n  };\r\n\r\n  const validate = useCallback(\r\n    (files: Array<File>) => {\r\n      if (accept) {\r\n        try {\r\n          if (multiple === true) {\r\n            files.forEach((e) => {\r\n              if (e && !validateType(e, accept)) {\r\n                onError(\r\n                  \"FileError\",\r\n                  \"One or more unsupported file types\",\r\n                  null\r\n                );\r\n                return false;\r\n              }\r\n            });\r\n          } else {\r\n            if (files.length > 1) {\r\n              onError(\"FileError\", \"More than one files selected\", null);\r\n              return false;\r\n            }\r\n\r\n            if (files[0] && !validateType(files[0], accept)) {\r\n              onError(\"FileError\", \"Unsupported file type\", null);\r\n\r\n              return false;\r\n            }\r\n          }\r\n        } catch {\r\n          onError(\"FileError\", \"Failed to validate file type\", null);\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    },\r\n    [accept, multiple, onError]\r\n  );\r\n\r\n\r\n  const handleUpload = useCallback(\r\n    (files: any) => {\r\n      if (progress <= 0 && files) {\r\n        if (!validate(files)) {\r\n          return;\r\n        }\r\n\r\n        upload(multiple ? files : files[0], (event) => {\r\n          if (event?.total !== 0) {\r\n            setProgress(Math.round((100 * event?.loaded) / event?.total));\r\n          }\r\n        })\r\n          .then((response) => {\r\n            if (response?.status !== 200) {\r\n              setProgress(0);\r\n            }\r\n\r\n            if (response) {\r\n              switch (response.status) {\r\n                case HTTP_STATUS.OK: // 200\r\n                  onSuccess(response.data, response);\r\n                  setIsSuccess(true);\r\n                  break;\r\n                default:\r\n                  break;\r\n              }\r\n            } else {\r\n              onError(\"Network\", \"Server bad request\", null);\r\n            }\r\n\r\n            return;\r\n          })\r\n          .catch((error) => {\r\n            setProgress(0);\r\n\r\n            if (axios.isCancel(error)) {\r\n              return;\r\n            }\r\n\r\n            if (error.status === HTTP_STATUS.BAD_REQUEST) {\r\n              if (!axios.isCancel(error)) {\r\n                onError(\"Exception\", \"Exception happend\", error);\r\n              }\r\n            }\r\n\r\n            switch (error.status) {\r\n              case HTTP_STATUS.UNAUTHORIZED: // 401\r\n                onError(\"Network\", \"Unauthorised\", null);\r\n                break;\r\n              case HTTP_STATUS.INTERNAL_SERVER_ERROR: // 500\r\n                onError(\"Network\", \"Internal server error\", null);\r\n                break;\r\n              case HTTP_STATUS.BAD_REQUEST: // 400\r\n                onError(\"Network\", \"Server bad request\", null);\r\n                break;\r\n              default:\r\n                // Default is 500\r\n                onError(\"Network\", \"Server bad request\", null);\r\n                break;\r\n            }\r\n          });\r\n\r\n        setIsVisible(false);\r\n      }\r\n    },\r\n    [multiple, progress, validate, onError, onSuccess, upload]\r\n  );\r\n\r\n\r\n  const onFileSelect = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n\r\n      if (isSuccess === false && progress <= 0) {\r\n        if (e?.target?.files) handleUpload(e?.target?.files);\r\n      }\r\n    },\r\n    [progress,isSuccess,handleUpload]\r\n  );\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const value = divRef.current;\r\n    if (value) {\r\n      value.addEventListener(\"dragleave\", onDragLeave);\r\n      value.addEventListener(\"dragenter\", onDragEnter);\r\n      value.addEventListener(\"dragover\", onDragOver);\r\n      value.addEventListener(\"drop\", onDrop);\r\n    }\r\n\r\n    return () => {\r\n      const value = divRef.current;\r\n\r\n      if (value) {\r\n        value.removeEventListener(\"dragleave\", onDragLeave);\r\n        value.removeEventListener(\"dragenter\", onDragEnter);\r\n        value.removeEventListener(\"dragover\", onDragOver);\r\n        value.removeEventListener(\"drop\", onDrop);\r\n      }\r\n    };\r\n  }, [onDragEnter, onDragLeave, onDragOver]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      source?.cancel();\r\n    };\r\n  }, [source]);\r\n\r\n  const inputFile = useRef<HTMLInputElement>(null);\r\n\r\n  return (\r\n    <div className={clsx(\"flex w-full h-full\",className)} ref={divRef}>\r\n      <div className=\"w-full h-full  \">\r\n        <div\r\n          className={clsx(\r\n            \"flex  h-full\",\r\n            \"w-full items-center my-auto mx-auto\"\r\n          )}\r\n        >\r\n          <div className=\"flex flex-col gap-y-1 font-semibold mx-auto text-center\">\r\n            <div\r\n              className={clsx(\r\n                \"mx-auto text-2xl\",\r\n                isVisible && !isSuccess && \"animate-bounce\",\r\n                progress > 0 && !isSuccess && \"animate-spin\"\r\n              )}\r\n            >\r\n              <FontAwesomeIcon\r\n                icon={\r\n                  progress === 0\r\n                    ? faFileUpload\r\n                    : isSuccess\r\n                    ? faCheckCircle\r\n                    : faSpinner\r\n                }\r\n              />\r\n            </div>\r\n            {variant && variant === \"big\" && (\r\n              <>\r\n                <GetProgress\r\n                  progress={progress}\r\n                  isSuccess={isSuccess}\r\n                  multiple={multiple} />\r\n\r\n                <div className={clsx(\"relative\")}>\r\n                  {progress <= 0 ? (\r\n                    <>\r\n                      <input\r\n                        style={{ display: \"none\" }}\r\n                        accept={accept}\r\n                        ref={inputFile}\r\n                        onChange={onFileSelect}\r\n                        type=\"file\"\r\n                        multiple={multiple}\r\n                        value=\"\"\r\n                      />\r\n                      <StayledButton\r\n                        type=\"button\"\r\n                        onClick={() => inputFile?.current?.click()}\r\n                        variant=\"primaryblue\"\r\n                      >\r\n                        Select\r\n                      </StayledButton>\r\n                    </>\r\n                  ) : (\r\n                    <div className=\"flex flex-row flex-nowrap gap-x-1 w-32 md:w-40\">\r\n                      <ProgressBar\r\n                        className=\"my-auto\"\r\n                        value={progress}\r\n                        barOnly\r\n                      />\r\n\r\n                      <CancleButton onClick={CancleRequest} />\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n/////////////////////////////////\r\n/// Helpers\r\n/////////////////////////////////\r\n\r\n\r\ntype GetProgressProps = {\r\n  progress:number,\r\n  isSuccess:boolean,\r\n  multiple:boolean\r\n}\r\n\r\nfunction GetProgress({progress,multiple,isSuccess}:GetProgressProps){\r\n return  <div>\r\n  {progress <= 0\r\n    ? multiple\r\n      ? \"Drop files to Upload\"\r\n      : \"Drop file to Upload\"\r\n    : progress >= 100\r\n    ? isSuccess\r\n      ? \"Success\"\r\n      : \"Validating\"\r\n    : \"Uploading\"}\r\n</div>\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////\r\n\r\nfunction containsFiles(event: any) {\r\n  if (event.dataTransfer.types) {\r\n    for (var i = 0; i < event.dataTransfer.types.length; i++) {\r\n      if (event.dataTransfer.types[i] === \"Files\") {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n//////////////////////////////////////////////////\r\n\r\n\r\nfunction validateType(file: File, accept: string) {\r\n  if (file && accept) {\r\n    const supported_types = accept.split(\",\");\r\n    return supported_types.includes(file.type);\r\n  }\r\n  return false;\r\n}\r\n","C:\\Users\\dakupc\\Documents\\.NetDev\\Drag-Drop-File\\File-DragDropper\\src\\Components\\constants.tsx",[],"C:\\Users\\dakupc\\Documents\\.NetDev\\Drag-Drop-File\\File-DragDropper\\src\\Components\\Progress\\ProgressBar.tsx",[],"C:\\Users\\dakupc\\Documents\\.NetDev\\Drag-Drop-File\\File-DragDropper\\src\\Components\\Buttons\\StayledButton.tsx",[],["40","41"],"C:\\Users\\dakupc\\Documents\\.NetDev\\Drag-Drop-File\\File-DragDropper\\src\\Components\\Buttons\\CancleButton.tsx",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":9,"column":10,"nodeType":"48","messageId":"49","endLine":9,"endColumn":15},{"ruleId":"50","severity":1,"message":"51","line":58,"column":3,"nodeType":"52","endLine":79,"endColumn":4},{"ruleId":"50","severity":1,"message":"53","line":251,"column":28,"nodeType":"48","endLine":251,"endColumn":35},{"ruleId":"50","severity":1,"message":"54","line":260,"column":6,"nodeType":"55","endLine":260,"endColumn":44,"suggestions":"56"},{"ruleId":"42","replacedBy":"57"},{"ruleId":"44","replacedBy":"58"},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"@typescript-eslint/no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","The 'upload' function makes the dependencies of useCallback Hook (at line 223) change on every render. Move it inside the useCallback callback. Alternatively, wrap the definition of 'upload' in its own useCallback() Hook.","FunctionDeclaration","The ref value 'divRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'divRef.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has a missing dependency: 'onDrop'. Either include it or remove the dependency array.","ArrayExpression",["61"],["59"],["60"],"no-global-assign","no-unsafe-negation",{"desc":"62","fix":"63"},"Update the dependencies array to be: [onDragEnter, onDragLeave, onDragOver, onDrop]",{"range":"64","text":"65"},[7232,7270],"[onDragEnter, onDragLeave, onDragOver, onDrop]"]